#!/usr/bin/env node

/**
 * Dependencias
 */

// Este archivo es el servidor https, el cual se encuentra
// fuera de uso ya que Heroku no aceptaba la api de https para
// poder hacer requests.

var app = require("../app");
var debug = require("debug")("confusionserver:server");
var http = require("http");
var https = require("https");
var fs = require("fs");

/*
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Server listens en port
 */

server.on("error", onError);
server.on("listening", onListening);

//HTTPS server (deshabilitado para heroku)

var options = {
  key: fs.readFileSync(__dirname + "/private.key"),
  cert: fs.readFileSync(__dirname + "/certificate.pem"),
};

// var secureServer = https.createServer(options, app);

/**
 * Server listens en port
 */

// secureServer.listen(app.get("secPort"), () => {
//  console.log("Server listening on port ", app.get("secPort"));
// });
// secureServer.on("error", onError);
// secureServer.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

// function normalizePort(val) {
//  var port = parseInt(val, 10);

//  if (isNaN(port)) {
// named pipe
//    return val;
//  }

//  if (port >= 0) {
// port number
//    return port;
//  }

//  return false;
// }

/**
Escucha los errores
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Escucha el evento listening
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
